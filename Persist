class Persist {

  public static int persistence(long number) {
    int index = 0;
    if(number < 10){
      return index;
    }
    return getDigitsForMoreThanOneDigit(number, index);
  }

  private static int getDigitsForMoreThanOneDigit(long moreDigits, int index){

    char[] stringToCharArray = String.valueOf(moreDigits).toCharArray();
    if(stringToCharArray.length == 1){
      return index ;
    }

    int result = 1;
    for (char output : stringToCharArray) {
      if (!Character.isDigit(output)){
        throw new IllegalArgumentException("wrong argument");
      }
      int y = Character.getNumericValue(output);
      result = result * y;

    }
    return getDigitsForMoreThanOneDigit(result, ++index) ;
  }
}


/**
persistence(39) == 3 // because 3*9 = 27, 2*7 = 14, 1*4=4
                      // and 4 has only one digit

 persistence(999) == 4 // because 9*9*9 = 729, 7*2*9 = 126,
                       // 1*2*6 = 12, and finally 1*2 = 2

 persistence(4) == 0 // because 4 is already a one-digit number
 **/
